(ert-deftest test-yahtzee-full-compute-score ()
  "Test `yahtzee-full-compute-score'."
  (let ((test-pairs '(([1 1 1 2 2] . 30)
		      ([3 2 3 2 3] . 30)
		      ([6 5 6 5 6] . 30)
		      ([1 2 3 2 3] .  0)
		      ([6 6 6 5 6] .  0)
		      ([6 6 6 6 6] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-full-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-petite-suite-compute-score ()
  "Test `yahtzee-petite-suite-compute-score'."
  (let ((test-pairs '(([3 2 1 4 5] . 25)
		      ([3 2 4 1 1] . 25)
		      ([4 2 3 2 1] . 25)
		      ([2 2 2 3 4] .  0)
		      ([6 5 4 4 4] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-petite-suite-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-grande-suite-compute-score ()
  "Test `yahtzee-grande-suite-compute-score'."
  (let ((test-pairs '(([3 2 1 4 5] . 35)
		      ([6 4 5 2 3] . 35)
		      ([1 2 3 4 5] . 35)
		      ([2 2 2 3 4] .  0)
		      ([1 2 6 5 4] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-grande-suite-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-carre-compute-score ()
  "Test `yahtzee-carre-compute-score'."
  (let ((test-pairs '(([1 1 1 4 1] . 40)
		      ([4 1 4 4 4] . 40)
		      ([5 5 5 5 5] . 40)
		      ([2 2 2 3 3] .  0)
		      ([1 3 3 3 5] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-carre-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-rigole-compute-score ()
  "Test `yahtzee-rigole-compute-score'."
  (let ((test-pairs '(([1 1 1 1 6] . 50)
		      ([2 2 5 2 2] . 50)
		      ([4 3 3 3 3] . 50)
		      ([4 3 4 4 4] . 50)
		      ([5 2 5 5 5] . 50)
		      ([6 6 1 6 6] . 50)
		      ([2 2 2 2 2] .  0)
		      ([5 3 3 3 3] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-rigole-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-yams-compute-score ()
  "Test `yahtzee-yams-compute-score'."
  (let ((test-pairs '(([1 1 1 1 1] . 50)
		      ([2 2 2 2 2] . 50)
		      ([3 3 3 3 3] . 50)
		      ([4 4 4 4 4] . 50)
		      ([5 5 5 5 5] . 50)
		      ([6 6 6 6 6] . 50)
		      ([2 2 1 2 2] .  0)
		      ([5 3 3 3 3] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-yams-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-1-compute-score ()
  "Test `yahtzee-1-compute-score'."
  (let ((test-pairs '(([1 1 1 1 1] . 5)
		      ([2 2 2 2 1] . 1)
		      ([3 3 1 3 1] . 2)
		      ([1 4 1 1 4] . 3)
		      ([1 2 1 1 1] . 4)
		      ([2 2 6 2 2] . 0)
		      ([2 3 4 5 6] . 0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-1-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-2-compute-score ()
  "Test `yahtzee-2-compute-score'."
  (let ((test-pairs '(([2 2 2 2 2] . 10)
		      ([1 1 1 1 2] .  2)
		      ([3 2 1 2 1] .  4)
		      ([2 4 2 2 4] .  6)
		      ([5 2 2 2 2] .  8)
		      ([1 3 3 3 6] .  0)
		      ([6 3 4 5 6] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-2-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-3-compute-score ()
  "Test `yahtzee-3-compute-score'."
  (let ((test-pairs '(([3 3 3 3 3] . 15)
		      ([3 3 3 3 2] . 12)
		      ([4 3 1 3 3] .  9)
		      ([2 4 3 3 4] .  6)
		      ([3 2 6 5 1] .  3)
		      ([1 4 4 2 6] .  0)
		      ([6 1 4 5 6] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-3-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-4-compute-score ()
  "Test `yahtzee-4-compute-score'."
  (let ((test-pairs '(([4 4 4 4 4] . 20)
		      ([4 4 4 4 2] . 16)
		      ([4 2 4 3 4] . 12)
		      ([2 4 3 3 4] .  8)
		      ([3 4 6 5 1] .  4)
		      ([1 3 1 2 6] .  0)
		      ([6 1 5 5 6] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-4-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-5-compute-score ()
  "Test `yahtzee-5-compute-score'."
  (let ((test-pairs '(([5 5 5 5 5] . 25)
		      ([5 5 5 5 2] . 20)
		      ([5 2 5 3 5] . 15)
		      ([5 4 5 3 4] . 10)
		      ([3 4 6 5 1] .  5)
		      ([1 3 1 2 6] .  0)
		      ([6 1 2 4 6] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-5-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-6-compute-score ()
  "Test `yahtzee-6-compute-score'."
  (let ((test-pairs '(([6 6 6 6 6] . 30)
		      ([6 6 6 6 2] . 24)
		      ([6 2 6 3 6] . 18)
		      ([5 6 5 6 4] . 12)
		      ([3 4 6 5 1] .  6)
		      ([1 3 1 2 2] .  0)
		      ([5 1 2 4 5] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-6-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-chance-compute-score ()
  "Test `yahtzee-chance-compute-score'."
  (let ((test-pairs '(([6 6 6 6 6] . 30)
		      ([6 6 6 6 2] . 26)
		      ([6 2 6 3 6] . 23)
		      ([5 6 5 6 4] . 26)
		      ([2 1 1 1 1] .  6)
		      ([1 3 1 2 2] .  9)
		      ([5 1 2 4 5] . 17)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-chance-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-brelan-compute-score ()
  "Test `yahtzee-brelan-compute-score'."
  (let ((test-pairs '(([1 1 6 6 6] . 20)
		      ([6 6 6 6 2] . 26)
		      ([6 2 6 3 6] . 23)
		      ([5 6 5 6 4] .  0)
		      ([2 1 1 1 1] .  6)
		      ([1 3 1 2 2] .  0)
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-brelan-compute-score) (cdr pair))))))

(ert-deftest test-yahtzee-plus-compute-score ()
  "Test `yahtzee-plus-compute-score'."
  (let ((test-pairs '(([1 1 6 6 6] . 20)
		      ([6 6 6 6 2] . 26)
		      ([5 1 5 1 6] . 18)
		      ([5 1 4 1 4] .  0)
		      ([2 1 1 1 1] .  0)
		      ([1 3 1 2 2] .  0)
		      )))
    ;; --------------------------------------
    ;; set "minus"
    ;; --------------------------------------
    (yahtzee-reset)
    (setq yahtzee-selected-field "minus")
    (setq yahtzee-dice-outcomes [5 5 5 1 1])
    ;; --------------------------------------
    (yahtzee-set-score yahtzee-selected-field 0)
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-plus-compute-score) (cdr pair)))))
  ;; reset on exit
  (yahtzee-reset))

(ert-deftest test-yahtzee-minus-compute-score ()
  "Test `yahtzee-minus-compute-score'."
  (let ((test-pairs '(([1 1 6 6 6] .  0)
		      ([6 6 6 6 2] .  0)
		      ([5 1 5 1 6] .  0)
		      ([5 1 4 1 4] . 15)
		      ([2 1 1 1 1] .  6)
		      ([1 3 1 2 2] .  9)
		      )))
    ;; --------------------------------------
    ;; set "plus"
    ;; --------------------------------------
    (yahtzee-reset)
    (setq yahtzee-selected-field "plus")
    (setq yahtzee-dice-outcomes [5 5 5 1 1])
    ;; --------------------------------------
    (yahtzee-set-score yahtzee-selected-field 0)
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (should (equal (yahtzee-minus-compute-score) (cdr pair)))))
  ;; reset on exit
  (yahtzee-reset))

(ert-deftest test-yahtzee-dice-count ()
  "Test `yahtzee-dice-count'."
  (let ((test-pairs '(([1 1 6 6 6] .  [2 0 0 0 0 3])
		      ([1 2 3 4 5] .  [1 1 1 1 1 0])
		      ([1 1 3 3 1] .  [3 0 2 0 0 0])
		      ([6 6 2 2 2] .  [0 3 0 0 0 2])
		      ([4 4 4 4 4] .  [0 0 0 5 0 0])
		      )))
    (dolist (pair test-pairs)
      (setq yahtzee-dice-outcomes (car pair))
      (yahtzee-dice-count)
      (should (equal yahtzee-dice-outcomes-counts (cdr pair)))))
  )
